
# This continuous integration pipeline is triggered anytime a user pushes code to the repo.
name: Continuous Integration

# Trigger on every master branch push and pull request
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  cloc:
    name: Count Lines of Code
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y perl wget

    - name: Count lines of code
      run: _tools/count_lines_of_code.sh

    - name: Upload CLOC.md
      uses: dmnemec/copy_file_to_another_repo_action@main
      env:
        API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
      with:
        source_file: _build/CLOC.svg
        destination_repo: drunkflystudio/.github
        destination_folder: badges/drunkflystudio
        user_name: 'GitHub Action'
        user_email: 'githubaction@example.com'
        commit_message: 'Automatic commit from builder'

    - name: Upload CLOC.svg
      uses: dmnemec/copy_file_to_another_repo_action@main
      env:
        API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
      with:
        source_file: _build/CLOC.svg
        destination_repo: drunkflystudio/.github
        destination_folder: badges/drunkflystudio
        user_name: 'GitHub Action'
        user_email: 'githubaction@example.com'
        commit_message: 'Automatic commit from builder'

  build:
    strategy:
      fail-fast: false
      matrix:
        target:
        - name: MacOS Xcode
          builder: macos-13
          builder_name: MacOS
          run_suffix: sh
          run: _build/macos_xcode
          dir: _build/macos/xcode

        - name: Ubuntu GCC 32-bit
          builder: ubuntu-20.04
          builder_name: Linux
          run_suffix: sh
          run: sudo apt-get update && _build/linux_gcc32
          dir: _build/linux32

        - name: Ubuntu GCC 64-bit
          builder: ubuntu-20.04
          builder_name: Linux
          run_suffix: sh
          run: sudo apt-get update && _build/linux_gcc64
          dir: _build/linux64

        - name: Linux 64-bit
          builder: windows-2022
          builder_name: Windows
          run_suffix: cmd
          run: _build\win32_linux64
          dir: _build/linux64

        - name: MSVC 2022 32-bit
          builder: windows-2022
          builder_name: Windows
          run_suffix: cmd
          run: _build\win32_msvc2022_32
          dir: _build/win32/msvc2022

        - name: MSVC 2022 64-bit
          builder: windows-2022
          builder_name: Windows
          run_suffix: cmd
          run: _build\win32_msvc2022_64
          dir: _build/win64/msvc2022

        - name: HTML5
          builder: windows-2022
          builder_name: Windows
          run_suffix: cmd
          run: _build\win32_html5
          dir: _build/html5

        - name: Borland C++ 4.52
          builder: windows-2022
          builder_name: Windows
          run_suffix: cmd
          run: _build\win32_bc45
          dir: _build/win32/borlnd45

        - name: Watcom 10.0a
          builder: windows-2022
          builder_name: Windows
          run_suffix: cmd
          run: _build\win32_watcom10
          dir: _build/win32/watcom10

        - name: MinGW 4.4.0 32-bit
          builder: windows-2022
          builder_name: Windows
          run_suffix: cmd
          run: _build\win32_mingw32_440
          dir: _build/win32/mingw440

        - name: MinGW 8.1.0 32-bit
          builder: windows-2022
          builder_name: Windows
          run_suffix: cmd
          run: _build\win32_mingw32_810
          dir: _build/win32/mingw810

        - name: MinGW 8.1.0 64-bit
          builder: windows-2022
          builder_name: Windows
          run_suffix: cmd
          run: _build\win32_mingw64_810
          dir: _build/win64/mingw810

    name: (${{ matrix.target.builder_name }}) ${{ matrix.target.name }}
    runs-on: ${{ matrix.target.builder }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Build with ${{ matrix.target.name }} (Debug)
      run: ${{ matrix.target.run }}_debug.${{ matrix.target.run_suffix }}
      id: debug
      if: ${{ !cancelled() }}

    - name: Build with ${{ matrix.target.name }} (Release)
      run: ${{ matrix.target.run }}_release.${{ matrix.target.run_suffix }}
      id: release
      if: ${{ !cancelled() }}

    - name: Upload artifacts for ${{ matrix.target.name }} (Debug)
      uses: actions/upload-artifact@v4
      if: ${{ !cancelled() && steps.debug.conclusion == 'success' }}
      with:
        name: ${{ matrix.target.name }} (Debug)
        path: |
          ${{ matrix.target.dir }}/Debug
          !${{ matrix.target.dir }}/Debug/cmake
        if-no-files-found: error
        include-hidden-files: false
        compression-level: 9

    - name: Upload artifacts for ${{ matrix.target.name }} (Release)
      uses: actions/upload-artifact@v4
      if: ${{ !cancelled() && steps.release.conclusion == 'success' }}
      with:
        name: ${{ matrix.target.name }} (Release)
        path: |
          ${{ matrix.target.dir }}/Release
          !${{ matrix.target.dir }}/Release/cmake
        if-no-files-found: error
        include-hidden-files: false
        compression-level: 9
